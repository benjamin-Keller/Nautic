@page "/containers"
@using Docker.DotNet.Models
@using Nautic.Services
@using static Nautic.Services.DockerService

<PageTitle>Home</PageTitle>

<div class="grid grid-cols-4 gap-6 p-6">
    <HardwareStats />
</div>

<div class="flex justify-end">
    <div class="flex items-center border border-cyan-500 rounded-full overflow-hidden divide-x divide-cyan-500">
        <span class="px-3 text-cyan-500 hover:bg-cyan-500 hover:text-white cursor-pointer transition-colors @(SelectedFilter == ContainerFilter.Alphabetical ? "bg-cyan-500 text-white" : "")" @onclick="@(_ => SetOrder(ContainerFilter.Alphabetical))">A-Z</span>
        <span class="px-3 text-cyan-500 hover:bg-cyan-500 hover:text-white cursor-pointer transition-colors @(SelectedFilter == ContainerFilter.CPU ? "bg-cyan-500 text-white" : "")" @onclick="@(_ => SetOrder(ContainerFilter.CPU))">CPU</span>
        <span class="px-3 text-cyan-500 hover:bg-cyan-500 hover:text-white cursor-pointer transition-colors @(SelectedFilter == ContainerFilter.Memory ? "bg-cyan-500 text-white" : "")" @onclick="@(_ => SetOrder(ContainerFilter.Memory))">Memory</span>
        <span class="px-3 text-cyan-500 hover:bg-cyan-500 hover:text-white cursor-pointer transition-colors @(SelectedFilter == ContainerFilter.Disk ? "bg-cyan-500 text-white" : "")" @onclick="@(_ => SetOrder(ContainerFilter.Disk))">Disk</span>
    </div>
</div>

<div class="grid grid-cols-4 gap-6 p-6">
    @foreach (var container in _filterableContainers)
    {
        <div @key="container.Id" class="container-card">
            <h3 class="text-lg font-semibold text-white">@container.Name</h3>
            <StateBadge State="@container.State" />

            <span class="text-sm text-gray-300 flex justify-between">
                <span>@($"{container.CpuPercent.ToString("N2")}%") CPU</span>
                <span>@($"{(container.MemoryUsedMb).ToString("N2")} MB / {(container.MemoryTotalMb / 1024).ToString("N2")} GB")</span>
            </span>
        </div>
    }
</div>

@code {
    [Inject] public required DockerService DockerService { get; set; }

    private ContainerFilter SelectedFilter { get; set; } = ContainerFilter.Alphabetical;

    private IEnumerable<ContainerMetrics> _containers => DockerService.CurrentMetrics.Values;
    private IEnumerable<ContainerMetrics> _filterableContainers = [];

    protected override async Task OnInitializedAsync()
    {
        DockerService.StatsUpdated += OnStatsUpdated;
        await DockerService.StartMonitoringAsync();
    }

    private void OnStatsUpdated()
    {
        InvokeAsync(StateHasChanged);
        SetOrder(SelectedFilter);
    }

    private void SetOrder(ContainerFilter filter)
    {
        if (SelectedFilter != filter)
            SelectedFilter = filter;

        _filterableContainers = filter switch
        {
            ContainerFilter.CPU => _containers.OrderByDescending(e => e.CpuPercent),
            ContainerFilter.Memory => _containers.OrderByDescending(e => e.MemoryPercent),
            ContainerFilter.Disk => _containers.OrderByDescending(e => e.DiskTotalMb),
            ContainerFilter.Alphabetical => _containers.OrderBy(e => e.Name),
            _ => _containers
        };
    }

    public void Dispose()
    {
        DockerService.StatsUpdated -= OnStatsUpdated;
        DockerService.StopMonitoring();
    }

    public enum ContainerFilter
    {
        None,
        Alphabetical,
        CPU,
        Memory,
        Disk
    }
}